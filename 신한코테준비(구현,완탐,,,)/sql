SELECT I.INGREDIENT_TYPE, SUM(F.TOTAL_ORDER) AS `TOTAL_ORDER` FROM FIRST_HALF AS F
INNER JOIN ICECREAM_INFO AS I ON I.FLAVOR = F.FLAVOR
GROUP BY I.INGREDIENT_TYPE
ORDER BY `TOTAL_ORDER` ASC;


SELECT ANIMAL_TYPE, COUNT(*) AS COUNT
FROM ANIMAL_INS
WHERE ANIMAL_TYPE = 'Cat' OR ANIMAL_TYPE = 'Dog'
GROUP BY ANIMAL_TYPE
ORDER BY FIELD(ANIMAL_TYPE, 'Cat', 'Dog');



SELECT NAME, COUNT(*) AS COUNT
FROM ANIMAL_INS
WHERE NAME IS NOT NULL
GROUP BY NAME
HAVING COUNT >= 2
ORDER BY NAME;

1
2
3
4
5
SELECT B.CATEGORY, SUM(S.SALES) AS TOTAL_SALES
FROM BOOK AS B
INNER JOIN BOOK_SALES AS S ON B.BOOK_ID = S.BOOK_ID
WHERE S.SALES_DATE LIKE '2022-01%'
GROUP BY B.CATEGORY
ORDER BY B.CATEGORY ASC;

SELECT category,price, product_name
from food_product
where price in(select max(price) from food_product group by category )
and category in('과자','국','김치','식용유')
group by category, product_name
order by price desc


2
3
4
5
6
SELECT a.FLAVOR
FROM FIRST_HALF a JOIN JULY b
ON a.FLAVOR = b.FLAVOR
GROUP BY FLAVOR
ORDER BY SUM(a.TOTAL_ORDER + b.TOTAL_ORDER) DESC
LIMIT 3

SELECT B.ANIMAL_ID, B.NAME
FROM ANIMAL_INS A RIGHT JOIN ANIMAL_OUTS B ON A.ANIMAL_ID = B.ANIMAL_ID
WHERE A.ANIMAL_ID IS NULL

SELECT o.ANIMAL_ID, o.NAME
FROM ANIMAL_OUTS o
WHERE NOT o.ANIMAL_ID IN (
    SELECT i.ANIMAL_ID
    FROM ANIMAL_INS i)
GROUP BY o.ANIMAL_ID
ORDER BY o.ANIMAL_ID

SELECT t1.name, t1.datetime
 FROM animal_ins t1
 WHERE t1.animal_id NOT IN (SELECT T2.animal_id FROM animal_outs t2)
 ORDER BY t1.datetime
 LIMIT 3\

SELECT FR.PRODUCT_ID, FR.PRODUCT_NAME, FR.PRICE*SUM(FO.AMOUNT) "TOTAL_SALES"
FROM FOOD_PRODUCT FR
JOIN FOOD_ORDER FO
ON FR.PRODUCT_ID=FO.PRODUCT_ID
WHERE DATE_FORMAT(PRODUCE_DATE, "%Y-%m")='2022-05'
GROUP BY FR.PRODUCT_ID
ORDER BY TOTAL_SALES DESC, FR.PRODUCT_ID;

그냥 join 은 inner join


SELECT M.MEMBER_NAME, R.REVIEW_TEXT, DATE_FORMAT(REVIEW_DATE,'%Y-%m-%d')
FROM MEMBER_PROFILE M INNER JOIN REST_REVIEW R ON M.MEMBER_ID = R.MEMBER_ID
WHERE M.MEMBER_ID =
(
    SELECT MEMBER_ID FROM
        (
            SELECT MEMBER_ID,COUNT(MEMBER_ID)
            FROM REST_REVIEW
            GROUP BY MEMBER_ID
            ORDER BY COUNT(MEMBER_ID) DESC
            LIMIT 1
        )
    AS NEW
)
ORDER BY R.REVIEW_DATE,R.REVIEW_TEXT;